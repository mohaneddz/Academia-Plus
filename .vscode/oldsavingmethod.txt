teachers : 


    void readData()
    {
        ifstream file("teachers.data");
        if (!file)
        {
            cerr << "Unable to open file teachers.data" << endl;
            return;
        }

        string line;
        int scheduleIndex = 0;
        int courseIndex = 0;
        while (getline(file, line))
        {
            if (line.find("name :") != string::npos)
            {
                this->name = line.substr(7);
            }
            else if (line.find("id :") != string::npos)
            {
                this->id = stol(line.substr(5));
            }
            else if (line.find("password :") != string::npos)
            {
                this->password = line.substr(11);
            }
            else if (line.find("email :") != string::npos)
            {
                this->email = line.substr(8);
            }
            else if (line.find("phone :") != string::npos)
            {
                this->phone = line.substr(8);
            }
            else if (line.find("address :") != string::npos)
            {
                this->address = line.substr(10);
            }
            else if (line.find("courses.ID :") != string::npos)
            {
                if (courseIndex < MAX_Courses)
                {
                    this->course[courseIndex]->setId(stoi(line.substr(13)));
                    courseIndex++;
                }
            }
            else if (line.find("schedule :") != string::npos)
            {
                if (scheduleIndex < 7)
                {
                    this->schedule[scheduleIndex] = line.substr(11);
                    scheduleIndex++;
                }
            }
            else if (line.find("groups :") != string::npos)
            {
                istringstream iss(line.substr(9));
                for (int i = 0; i < 13; i++)
                {
                    int bit;
                    iss >> bit;
                    this->groups[i] = bit;
                }
            }
            else if (line.find("--END--") != string::npos)
            {
                break;
            }
        }

        file.close();
    }
    void saveData()
    {
        ofstream file("teachers.data", ios::app);
        if (!file)
        {
            cerr << "Unable to open file teachers.data" << endl;
            return;
        }

        file << "name : " << this->name << endl;
        file << "id : " << this->id << endl;
        file << "password : " << this->password << endl;
        file << "email : " << this->email << endl;
        file << "phone : " << this->phone << endl;
        file << "address : " << this->address << endl;
        for (int i = 0; i < MAX_Courses; i++)
        {
            if (this->course[i] != nullptr)
            {
                if (course[i]->getName() != "Unknown")
                {
                    file << "courses.ID : " << this->course[i]->getId() << endl;
                }
            }
            else
                file << "courses.ID : " << endl;
        }
        for (int i = 0; i < 7; i++)
        {
            file << "schedule : " << this->schedule[i] << endl;
        }
        file << "groups : ";
        for (int i = 0; i < 13; i++)
        {
            file << this->groups[i] << " ";
        }
        file << endl;
        file << "--END--" << endl;

        file.close();
    }
    void empty()
    {
        ofstream ofs("teachers.txt", ios::out);
        ofs.close();
    }}

Students : {
       void empty()
    {
        ofstream ofs("students.txt", ios::out);
        ofs.close();
    }
    void readData()
    {
        ifstream file("courses.data");
        if (!file)
        {
            cerr << "Unable to open file courses.data" << endl;
            return;
        }

        string line;
        int scheduleIndex = 0;
        while (getline(file, line))
        {
            if (line.find("name :") != string::npos)
            {
                this->name = line.substr(7); // Skip "name : "
            }
            else if (line.find("id :") != string::npos)
            {
                this->id = stoi(line.substr(5)); // Skip "id : "
            }
            else if (line.find("schedule :") != string::npos)
            {
                if (scheduleIndex < 7)
                {
                    this->schedule[scheduleIndex] = line.substr(11); // Skip "schedule : "
                    scheduleIndex++;
                }
            }
            else if (line.find("group :") != string::npos)
            {
                this->group = stoi(line.substr(7)); // Skip "name : "
            }
            else if (line.find("schedule :") != string::npos)
            {
                if (scheduleIndex < 7)
                {
                    this->schedule[scheduleIndex] = line.substr(11); // Skip "schedule : "
                    scheduleIndex++;
                }
            }
            else if (line.find("--END--") != string::npos)
            {
                break;
            }
        }

        file.close();
    }
    void saveData()
    {
        ofstream file("students.data", ios::app);
        if (file.is_open())
        {
            file << "name : " << name << "\n"; // Save the instance name
            file << "id : " << id << "\n";     // Save the instance id
            for (int i = 0; i < 7; i++)
            {
                file << "schedule : " << schedule[i] << "\n";
            }
            file << "groups : " << group << "\n"; // Save the instance id

            file << "\n"
                 << "--END--";
            file.close();
        }
    }}

Courses {
   void readData()
    {
        ifstream file("courses.data");
        if (!file)
        {
            cerr << "Unable to open file courses.data" << endl;
            return;
        }

        string line;
        int scheduleIndex = 0;
        while (getline(file, line))
        {
            if (line.find("name :") != string::npos)
            {
                this->name = line.substr(7); // Skip "name : "
            }
            else if (line.find("id :") != string::npos)
            {
                this->id = stoi(line.substr(5)); // Skip "id : "
            }
            else if (line.find("schedule :") != string::npos)
            {
                if (scheduleIndex < 7)
                {
                    this->schedule[scheduleIndex] = line.substr(11); // Skip "schedule : "
                    scheduleIndex++;
                }
            }
            else if (line.find("groups :") != string::npos)
            {
                istringstream iss(line.substr(8)); // Skip "group : "
                for (int i = 0; i < 13; i++)
                {
                    int bit;
                    iss >> bit;
                    this->groups[i] = bit;
                }
            }
            else if (line.find("--END--") != string::npos)
            {
                break;
            }
        }

        file.close();
    }
    void saveData()
    {
        ofstream file("courses.data", ios::app);
        if (file.is_open())
        {
            file << "name : " << name << "\n"; // Save the instance name
            file << "id : " << id << "\n";     // Save the instance id
            for (int i = 0; i < 7; i++)
            {
                file << "schedule : " << schedule[i] << "\n";
            }
            file << "groups : ";
            for (int i = 0; i < 13; i++)
            {
                file << " " << groups[i];
            }
            file << "\n"
                 << "--END--";
            file.close();
        }
    }}

REFRESHING {
    
    void refreshCourses()
    {
        ifstream file("courses.txt");
        string line;
        while (getline(file, line))
        {
            if (line.find("name") != string::npos)
            {
                Courses *course = new Courses();
                course->readData();
            }
        }
    }
    void refreshStudents()
    {
        ifstream file("students.txt");
        string line;
        while (getline(file, line))
        {
            if (line.find("name") != string::npos)
            {
                Students *student = new Students();
                student->readData();
            }
        }
    }
    void refreshTeachers()
    {
        ifstream file("teachers.txt");
        string line;
        while (getline(file, line))
        {
            if (line.find("name") != string::npos)
            {
                Teachers *teacher = new Teachers();
                teacher->readData();
            }
        }
    }

}
-------------------------------

data file {
    name : OOP
id : 1
schedule : 08:00-10:00
schedule : 08:00-10:00
schedule : 14:00-16:00
schedule : 14:00-16:00
schedule : 08:00-10:00
schedule : 
schedule : 
groups :  1 1 1 0 0 0 0 0 0 0 0 0 0
--END--name : OOP
id : 1
schedule : 08:00-10:00
schedule : 08:00-10:00
schedule : 14:00-16:00
schedule : 14:00-16:00
schedule : 08:00-10:00
schedule : 
schedule : 
groups :  1 1 1 0 0 0 0 0 0 0 0 0 0
--END--




name : Mohaned
id : 1
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
groups : 3

--END--name : Mohaned
id : 1
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
groups : 3

--END--




name : Kacimi
id : 1
password : kac
email : Kacimi@ensia.edu.dz
phone : 0999999999
address : Constantine 
courses.ID : 3
courses.ID : 4
courses.ID : 6
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
groups : 132 0 0 0 0 0 0 1 0 0 0 0 0 
--END--
name : Kacimi
id : 1
password : kac
email : Kacimi@ensia.edu.dz
phone : 0999999999
address : Constantine 
courses.ID : 5
courses.ID : 7
courses.ID : 11
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
schedule : 
groups : 55 0 0 0 0 0 0 1 0 0 0 0 0 
--END--
















}